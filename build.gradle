plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
    id 'idea'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES' //SCAN, REGISTRYDUMP
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "${mod_id}" { source sourceSets.main } }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }

    maven { url = "https://maven.enginehub.org/repo/" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }
}

dependencies {
    // FORGE ******************************************************************************************************
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // MIXINS *****************************************************************************************************
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // GECKOLIB ***************************************************************************************************
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")

    // CAELUS *****************************************************************************************************
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")

    // PLAYER ANIMATOR ********************************************************************************************
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")

    // TETRA ******************************************************************************************************
    compileOnly fg.deobf("se.mickelus.mutil:mutil:${mutil_version}")
    compileOnly fg.deobf("curse.maven:tetra-${tetra_version}")
    // If you want to run with tetra in dev comment the above line and uncomment the following 2 lines
    //runtimeOnly fg.deobf("curse.maven:tetra-${tetra_version}")
    //implementation fg.deobf("se.mickelus.mutil:mutil:${mutil_version}")

    // JEI ********************************************************************************************************
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${jei_version}")
    //runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:4599099")

    // CURIOS *****************************************************************************************************
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    //Uncomment the following line to run with Curios in dev
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // BETTER COMBAT **********************************************************************************************
    //runtimeOnly fg.deobf("curse.maven:better-combat-by-daedelus-${better_combat_version}")
    //runtimeOnly fg.deobf("curse.maven:cloth-config-348521:4633416")

    // PATCHOULI **************************************************************************************************
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // APOTHEOSIS
    compileOnly fg.deobf("curse.maven:apotheosis-${apotheosis_version}")
    runtimeOnly fg.deobf("curse.maven:apotheosis-${apotheosis_version}")
    runtimeOnly fg.deobf("curse.maven:placebo-${placebo_version}")
    runtimeOnly fg.deobf("curse.maven:attributeslib-${attributeslib_version}")

    // JSON ******************************************************************************************************
    implementation "com.google.code.gson:gson:${gson_version}"

    // LOCAL LIBS FOR TESTING (put the jar in /libs/ folder

    //jarJar(implementation(fg.deobf("ignored:defaultresources-forge:1.19.2-0.3.0"))) {
    //    jarJar.ranged(it, "[0.3.0,)")
    //}

    //runtimeOnly fg.deobf("com.refinedmods:refinedstorage:1.11.6")

    //Dimensional-Threading-Reforged-1.19.2-1.2.7.jar
    //runtimeOnly fg.deobf('wearblackallday.dimthread:Dimensional-Threading-Reforged:1.19.2-1.2.7')

    //RoughlyEnoughItems-9.1.595.jar
    //    implementation fg.deobf("dev.architectury:architectury-forge:6.5.82")
    //    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.2.88")
    //    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:9.1.595")
    //    runtimeOnly fg.deobf('me.shedaniel:RoughlyEnoughItems-plugin-compatibilities-forge:9.0.480')

    //valhelsia_structures-forge-1.19.2-1.0.2.jar
    //runtimeOnly fg.deobf('com.stal111.valhelsia_structures:valhelsia_core-forge:1.19.2-0.5.0')
    //runtimeOnly fg.deobf('com.stal111.valhelsia_structures:valhelsia_structures-forge:1.19.2-1.0.2')

    //Apotheosis
    //compileOnly fg.deobf("curse.maven:apotheosis-${apotheosis_version}")
    //runtimeOnly fg.deobf("curse.maven:apotheosis-${apotheosis_version}")
    //runtimeOnly fg.deobf("curse.maven:placebo-${placebo_version}")

    //Blue Skies
    //runtimeOnly fg.deobf('com.legacy:blue_skies:1.19.2-1.3.20')
    //implementation fg.deobf("com.legacy:structure-gel:1.19.2-2.7.2")

    //implementation fg.deobf("io.redspace:modlist:1.0.0")
    //    for ( File file : fileTree(dir: 'libs', include: '*.jar') ) {
    //        runtimeOnly files(file)
    //    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version       : forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors         : mod_authors, mod_description: mod_description, mod_credits: mod_credits,
        mod_issue_tracker   : mod_issue_tracker, mod_display_url: mod_display_url,
        mod_logo_file       : mod_logo_file
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.${mod_id}.json"
        ])
    }
    exclude('**/*.psd')
    exclude('**/*.bbmodel')
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project ], dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

java {
    withSourcesJar()
    //withJavadocJar()
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set('api')
    include 'io/redspace/ironsspellbooks/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives apiJar
    archives sourcesJar
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {

        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories {
        maven {
            name = "redspace"

            if (project.version.endsWith('-SNAPSHOT')) {
                url uri("https://code.redspace.io/snapshots")
            } else {
                url uri("https://code.redspace.io/releases")
            }

            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('copyAnimations', Copy) {
    from "src/main/resources/assets/${mod_id}/player_animation"
    include 'casting_animations.json'
    into "src/main/resources/assets/${mod_id}/animations"
}

tasks.classes.dependsOn(tasks.copyAnimations)
tasks.processResources.dependsOn(tasks.copyAnimations)
tasks.sourcesJar.dependsOn(tasks.copyAnimations)

mixin {
    add sourceSets.main, 'irons_spellbooks.refmap.json'
    config 'mixins.irons_spellbooks.json'
}
